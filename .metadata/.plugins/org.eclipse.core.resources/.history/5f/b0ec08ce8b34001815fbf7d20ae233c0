package MC;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.os.WindowsUtils;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import afterLoginIn.CommonAPI;

public class TestSetF extends afterLoginIn.CommonAPI {
	// this method will be executed before every test
	@BeforeMethod
	public void SetUpPreDataMethod() {
		System.out.println("Before Each Test  executed");
		WindowsUtils.killByName("chromedriver.exe");
		WindowsUtils.killByName("iexplore.exe");
		WindowsUtils.killByName("geckodriver.exe");
		WindowsUtils.killByName("MicrosoftWebDriver.exe");
		WindowsUtils.killByName("MicrosoftEdge.exe");
	}

	// Requirement 601: Users are able to calculate mortgage payment
	@Test(enabled = false)
	public void CalculateMortgatePayment_HardCodedValues() {
		WindowsUtils.killByName("chromedriver.exe");
		String vBaseURL = "https://www.mortgagecalculator.org/";
		CommonAPI CommonAPI = new CommonAPI();
		WebDriver driver = CommonAPI.getDriver("CHROME", vBaseURL);
		waitTime(15000);
		scrolldown(driver, 300);
		driver.findElement(By.name("param[homevalue]")).sendKeys("350000");
		driver.findElement(By.name("param[principal]")).sendKeys("300000");
		driver.findElement(By.name("param[interest_rate]")).sendKeys("2.25");
		driver.findElement(By.name("param[term]")).sendKeys("15");
		driver.findElement(By.name("param[property_tax]")).sendKeys(".5");
		driver.findElement(By.name("param[pmi]")).sendKeys("1.3");
		driver.findElement(By.name("param[hoi]")).sendKeys("2000");
		waitTime(2000);
		driver.findElement(By.name("cal")).click();
		waitTime(7000);
		scrolldown(driver, 300);
		// Highlighting the object that will be used for checkpoint (updated on
		// 1/17/2018)
		WebElement v = driver.findElement(By.xpath(
				"//*[@id=\"calc\"]/form/section/section[2]/div/div/div[1]/div/div/div[3]/div[2]/div[2]/div[1]/div[1]/h3"));
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		jse.executeScript("arguments[0].style.border='3px solid red'", v);
		waitTime(7000);
		// putting check point
		String vOutput = driver
				.findElement(By
						.xpath("//*[@id=\"calc\"]/form/section/section[2]/div/div/div[1]/div/div/div[3]/div[2]/div[2]/div[1]/div[1]/h3"))
				.getText();
		System.out.println(vOutput);
		try {
			Assert.assertEquals(vOutput, "$2,602.75");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Failed because" + e);
		}
	}

	// This is not TestNG test. This method will be used to create TestNG
	// method.
	public void CalculateMortgatePayment_P(String wBrowser, String vhomevalue, String vprincipal, String vinterest_rate,
			String vterm, String vproperty_tax, String vpmi, String vhoi, String vExpectedPayment) {
		WindowsUtils.killByName("chromedriver.exe");
		String vBaseURL = "https://www.mortgagecalculator.org/";
		CommonAPI CommonAPI = new CommonAPI();
		WebDriver driver = CommonAPI.getDriver(wBrowser, vBaseURL);
		waitTime(15000);
		scrolldown(driver, 300);
		driver.findElement(By.name("param[homevalue]")).clear();
		driver.findElement(By.name("param[homevalue]")).sendKeys(vhomevalue);
		driver.findElement(By.name("param[principal]")).clear();
		driver.findElement(By.name("param[principal]")).sendKeys(vprincipal);
		driver.findElement(By.name("param[interest_rate]")).clear();
		driver.findElement(By.name("param[interest_rate]")).sendKeys(vinterest_rate);
		driver.findElement(By.name("param[term]")).clear();
		driver.findElement(By.name("param[term]")).sendKeys(vterm);
		driver.findElement(By.name("param[property_tax]")).clear();
		driver.findElement(By.name("param[property_tax]")).sendKeys(vproperty_tax);
		driver.findElement(By.name("param[pmi]")).clear();
		driver.findElement(By.name("param[pmi]")).sendKeys(vpmi);
		driver.findElement(By.name("param[hoi]")).clear();
		driver.findElement(By.name("param[hoi]")).sendKeys(vhoi);
		waitTime(2000);
		driver.findElement(By.name("cal")).click();
		waitTime(7000);
		scrolldown(driver, 300);
		String vOutput = driver
				.findElement(By
						.xpath("//*[@id=\"calc\"]/form/section/section[2]/div/div/div[1]/div/div/div[3]/div[2]/div[2]/div[1]/div[1]/h3"))
				.getText();
		System.out.println(vOutput);
		try {
			Assert.assertEquals(vOutput, vExpectedPayment);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Failed because" + e);
		}
	}

	// Requirement 402: Users are able to calculate mortgage payment -Google
	// Chrome
	@Test(enabled = false)
	public void TC_402_MC_GC_A() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("CHROME", "200000", "100000", "4", "30", "4.5", "1.26", "1500",
				"$1,591.12");
	}

	// Requirement 403: Users are able to calculate mortgage payment -Google
	// Chrome
	@Test(enabled = false)
	public void TC_403_MC_GC_B() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("CHROME", "200000", "100000", "5", "15", "4.7", "1.26", "1500",
				"$2,094.52");
	}

	// Requirement 404: Users are able to calculate mortgage payment -Google
	// Chrome
	@Test(enabled = false)
	public void TC_404_MC_GC_C() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("CHROME", "200000", "100000", "3", "10", "4.0", "1.26", "1500",
				"$2,240.08");
	}

	// Requirement 405: Users are able to calculate mortgage payment -FF

	@Test(enabled = false)
	public void TC_405_MC_FF_A() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("FIREFOX", "200000", "100000", "4", "30", "4.5", "1.26", "1500",
				"$1,352.42");
	}

	// Requirement 406: Users are able to calculate mortgage payment -FF

	@Test(enabled = false)
	public void TC_406_MC_FF_B() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("FIREFOX", "200000", "100000", "5", "15", "4.7", "1.26", "1500",
				"$1,699.13");
	}

	// Requirement 407: Users are able to calculate mortgage payment -FF
	@Test(enabled = true)
	public void TC_407_MC_FF_C() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("FIREFOX", "200000", "100000", "3", "10", "4.0", "1.26", "1500",
				"$1,757.27");
	}

	// Requirement 408: Users are able to calculate mortgage payment -ME
	@Test(enabled = false)
	public void TC_408_MC_ME_A() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("MICROSOFE EDGE", "200000", "100000", "4", "30", "4.5", "1.26", "1500",
				"$1,352.42");
	}

	// Requirement 409: Users are able to calculate mortgage payment -ME
	@Test(enabled = false)
	public void TC_409_MC_ME_B() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("MICROSOFE EDGE", "200000", "100000", "5", "15", "4.7", "1.26", "1500",
				"$1,699.13");
	}

	// Requirement 410: Users are able to calculate mortgage payment -ME
	@Test(enabled = false)
	public void TC_10_MC_ME_C() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.CalculateMortgatePayment_P("MICROSOFE EDGE", "200000", "100000", "3", "10", "4.0", "1.26", "1500",
				"$1,757.27");
	}

	// ScrollDown and up
	public void SUD(String wBroser) {
		WindowsUtils.killByName("chromedriver.exe");
		String vBaseURL = "https://www.mortgagecalculator.org/";
		CommonAPI CommonAPI = new CommonAPI();
		WebDriver driver = CommonAPI.getDriver(wBroser, vBaseURL);
		waitTime(15000);
		ScrollDownAndUp(driver, 1000);
	}

	// Requirement 411: Users are able to scroll down and up in Google Chorme
	// browser
	@Test(enabled = false)
	public void TC_411_DownAndUPonly_CHROME() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.SUD("CHROME");
	}

	// Requirement 412: Users are able to scroll down and up in firefox browser
	@Test(enabled = false)
	public void TC_412_DownAndUPonly_FF() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.SUD("FIREFOX");
	}

	// Requirement 413: Users are able to scroll down and up in Micorsoft Edge
	// browser
	@Test(enabled = false)
	public void TC_413_DownAndUPonly_ME() {
		TestSetF TestSetF = new TestSetF();
		TestSetF.SUD("MICROSOFE EDGE");
	}

}
